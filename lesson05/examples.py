# Задача №31. Решение в группах
# Последовательностью Фибоначчи называется
# последовательность чисел a0
# , a1
# , ..., an
# , ..., где
# a0
#  = 0, a1
#  = 1, ak
#  = ak-1 + ak-2 (k > 1).
# Требуется найти N-е число Фибоначчи
# Input: 7
# Output: 21
# Задание необходимо решать через рекурсию
# 15 минут

def fb(n):
    if n in (1, 2):
        return 1
    return fb(n - 1) + fb(n - 2)


def example01():
    print(fb(10))

# Задача №33. Решение в группах
# Хакер Василий получил доступ к классному журналу и
# хочет заменить все свои минимальные оценки на
# максимальные. Напишите программу, которая
# заменяет оценки Василия, но наоборот: все
# максимальные – на минимальные.
# Input: 5 -> 1 3 3 3 4
# Output: 1 3 3 3 1
# 15 минут

def grades():
    count = int(input('Введите кол-во оценок:'))
    b = b*count
    for j in range(len(b)):
        num = int(input('Введите оценку: '))
        b[j] = num
    print('Все оценки:', b)
    for i in range(len(b)):
        if b[i] > 3:
            b[i] = 1
    print('Изменённые оценки: ', b)

# Задача №35. Решение в группах
# Напишите функцию, которая принимает одно число и
# проверяет, является ли оно простым
# Напоминание: Простое число - это число, которое
# имеет 2 делителя: 1 и n(само число)
# Input: 5
# Output: yes 15


def isSimple(a):
    return all(a % i for i in range(2, a))


def example03():
    a = int(input("Введите число:"))
    print("число ", "простое" if isSimple(a) else "не простое")



# Задача №37. Решение в группах
# Дано натуральное число N и
# последовательность из N элементов.
# Требуется вывести эту последовательность в
# обратном порядке.
# Примечание. В программе запрещается
# объявлять массивы и использовать циклы
# (даже для ввода и вывода).
# Input: 2 -> 3 4
# Output: 4 3


def rev_num(num):
    if num == 0:
        return ""
    nums = input()
    return rev_num(num - 1) + f"{nums} "

print(rev_num(int(input())))